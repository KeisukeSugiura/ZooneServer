#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('animalshoutserver:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '55555');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require("socket.io")(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



/**
 * socket.io
 */



io.sockets.on('connection', function(socket) {

  /*
      for electron connection
   */

  socket.on('shout_notification',function(message){
      // userName, keywordList, animalType 
      // add socketId
      message.socketId = socket.id;
      console.log("shout_notification")
      socket.broadcast.emit("shout_notification",message);
  })

  socket.on('start_chat',function(message){
      // roomName
      socket.to(message.socketId).emit("start_chat", message);
      //socket.broadcast.emit("start_chat",message)
  })

  /*
     for video chat
   */


  // 入室
  socket.on('enter', function(roomname) {
    //socket.set('roomname', roomname);
    //
    console.log(socket.id+' join '+roomname);
    socket.join(roomname);
  });

  socket.on('signaling', function(message) {
    // 送信元のidをメッセージに追加（相手が分かるように）

    message.target.from = socket.id;
        // 送信先が指定されているか？
    
    var target = message.target.sendto;
    var body = message.body;


    if (target) {
  　　// 送信先が指定されていた場合は、その相手のみに送信
      console.log(message.target.from+'  ----->  '+message.target.sendto+' ('+message.body.type+') ');
      io.sockets.to(target).emit('signaling', message);
    return;
    }

  // 特に指定がなければ、ブロードキャスト
  //
  console.log(message.target.from+'  emitMessage '+'('+message.body.type+')'); 
  emitMessage('signaling', message);

  
});

  socket.on('disconnect', function(message) { 
    //console.log(message.target.from+'  emitMessage'); 
    console.log(socket.id+' disconnected');
    var sendObj={
      body:{type:'user disconnected'},
      target:{from:socket.id,sendto:null}
    }
    emitMessage('signaling',sendObj);
  });


  socket.on('changeVideoPosition',function(message){
    var sendObj={
      body:{type:'changeVideoPosition',value:message},
      target:{from:socket.id,sendto:null,roomName:message.roomName}
    }
    emitMessage('changeVideoPosition',sendObj);
  });

  socket.on('initializeVideoPosition',function(message){
      var sendObj={
        body:{type:'initializeVideoPosition',value:message},
        target:{from:socket.id,sendto:null,roomName:message.roomName}
      }
      emitMessage('initializeVideoPosition',sendObj);
  });

  // 会議室名が指定されていたら、室内だけに通知
  function emitMessage(type, message) {

    var roomname=message.target.roomName;
   // socket.get('roomname', function(err, _room) {  roomname = _room;  });

   if (roomname) { 
     socket.to(roomname).emit(type, message);   
   }
   else {
     socket.broadcast.emit(type, message);
   }
 } 
});

